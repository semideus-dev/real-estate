generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PropertyType {
  HOUSE
  FLAT
  LAND
}

enum PropertyFacing {
  NORTH
  SOUTH
  EAST
  WEST
}

enum ListingType {
  SALE
  RENT
}

enum PropertyCondition {
  NEW
  OLD
  REFURNISHED
}

model Property {
  id           String            @id @default(cuid()) @map("_id")
  isAvailable  Boolean           @default(true)
  isCornerPlot Boolean           @default(false)
  socialId     String?           @unique
  thumbnailUrl String?
  photosUrls   String?
  videoUrl     String?
  lat          String?
  long         String?
  name         String
  description  String
  address      String
  city         String
  state        String
  postalCode   Int
  beds         Int
  baths        Int
  price        Float
  area         Float
  condition    PropertyCondition
  listing      ListingType
  facing       PropertyFacing
}

enum LeadStatus {
  HOT
  WARM
  COLD
}

model Lead {
  id                String       @id @default(cuid()) @map("_id")
  status            LeadStatus
  listing           ListingType
  userFullName      String
  userFatherName    String
  userAddress       String
  userBudget        String
  propertiesScouted String[]
}
